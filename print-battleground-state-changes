#!/usr/bin/env python3

import collections
import datetime
import json
import pprint
import subprocess

AZ_INDEX = 3
GA_INDEX = 10
MI_INDEX = 22
NC_INDEX = 27
NV_INDEX = 33
PA_INDEX = 38

STATE_INDEXES = [AZ_INDEX, GA_INDEX, MI_INDEX, NC_INDEX, NV_INDEX, PA_INDEX]


def git_rev_list(ref):
    return subprocess.check_output(['git', 'rev-list', ref]).strip().decode().split()


def git_show(ref, name):
    return subprocess.check_output(['git', 'show', ref + ':' + name])


def fetch_all_results_jsons():
    jsons = []
    for rev in git_rev_list('HEAD')[::-1][1:]:
        jsons.append(json.loads(git_show(rev, 'results.json')))
    return jsons

summarized = {}
jsons = fetch_all_results_jsons()

for state_index in STATE_INDEXES:
    state_name = jsons[0]['data']['races'][state_index]['state_id']
    summarized[state_name] = collections.OrderedDict()
    for json in jsons:
        timestamp = datetime.datetime.strptime(json['meta']['timestamp'], '%Y-%m-%dT%H:%M:%S.%fZ')
        state_blob = json['data']['races'][state_index]
        candidate1 = state_blob['candidates'][0]
        candidate2 = state_blob['candidates'][1]
        candidate1_name = candidate1['last_name']
        vote_diff = candidate1['votes'] - candidate2['votes']
        votes_remaining = state_blob['tot_exp_vote'] - state_blob['votes']
        precints_reporting = state_blob['precincts_reporting']
        precints_total = state_blob['precincts_total']
        candidate_votes = f'{candidate1_name} leading by {vote_diff:,} votes (est. votes remaining: {votes_remaining:,}) (precincts reported: {precints_reporting}/{precints_total})'
        if len(summarized[state_name]) == 0 or candidate_votes != next(reversed(summarized[state_name].values())):
            summarized[state_name][timestamp] = candidate_votes


print('Legend:')
print('  --- indicates more than 30 minutes ago')
print('  *** indicates less than 30 minutes ago')
print()

for (state, timestamped_results) in summarized.items():
    print(state)
    for (timestamp, candidate_votes) in reversed(timestamped_results.items()):
        minutes_ago = (datetime.datetime.utcnow() - timestamp).total_seconds() / 60
        symbology = '---' if minutes_ago > 30 else '***'
        formatted_timestamp = timestamp.strftime('%Y-%m-%d %H:%M')
        print(f'  {formatted_timestamp} {symbology} {candidate_votes}')
