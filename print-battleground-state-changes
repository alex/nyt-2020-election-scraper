#!/usr/bin/env python3

import collections
import datetime
import json
import pprint
import subprocess
import humanize

AZ_INDEX = 3
GA_INDEX = 10
NC_INDEX = 27
NV_INDEX = 33
PA_INDEX = 38

STATE_INDEXES = [AZ_INDEX, GA_INDEX, NC_INDEX, NV_INDEX, PA_INDEX]


def git_commits_for(path):
    return subprocess.check_output(['git', 'log', "--format=%H", path]).strip().decode().splitlines()


def git_show(ref, name):
    return subprocess.check_output(['git', 'show', ref + ':' + name])


def fetch_all_results_jsons():
    jsons = []
    for rev in git_commits_for("results.json"):
        jsons.append(json.loads(git_show(rev, 'results.json')))
    jsons.sort(key=lambda j: j['meta']['timestamp']) # Really make sure we’re in order
    return jsons

# Information that is shared across loop iterations
IterationInfo = collections.namedtuple(
    'IterationInfo',
    ['vote_diff', 'votes_remaining', 'precincts_reporting', 'hurdle']
)

# List of results.json dicts, in chronological order
jsons = fetch_all_results_jsons()

# Where we’ll aggregate the data from the JSON files
summarized = {}

for state_index in STATE_INDEXES:
    state_name = jsons[0]['data']['races'][state_index]['state_name']
    summarized[state_name] = collections.OrderedDict()

    last_iteration_info = IterationInfo(
        vote_diff=None,
        votes_remaining=None,
        precincts_reporting=None,
        hurdle=0
    )

    for json in jsons:
        timestamp = datetime.datetime.strptime(json['meta']['timestamp'], '%Y-%m-%dT%H:%M:%S.%fZ')

        # Retrieve relevant data from the state’s JSON blob
        state_blob = json['data']['races'][state_index]
        candidate1 = state_blob['candidates'][0] # Leading candidate
        candidate2 = state_blob['candidates'][1] # Trailing candidate
        candidate1_name = candidate1['last_name']
        candidate2_name = candidate2['last_name']
        vote_diff = candidate1['votes'] - candidate2['votes']
        votes_remaining = state_blob['tot_exp_vote'] - state_blob['votes']
        precincts_reporting = state_blob['precincts_reporting']
        precincts_total = state_blob['precincts_total']
        counted_since = 0 if last_iteration_info.votes_remaining is None else (last_iteration_info.votes_remaining - votes_remaining)

        hurdle = (((votes_remaining - vote_diff)/2) + vote_diff) / votes_remaining

        iteration_info = IterationInfo(
            vote_diff=vote_diff,
            votes_remaining=votes_remaining,
            precincts_reporting=precincts_reporting,
            hurdle=hurdle,
        )

        # Avoid writing duplicate rows
        if last_iteration_info == iteration_info:
            continue

        # Generate the string we’ll output and store it
        summarized[state_name][timestamp] = f'{candidate1_name} leading by {vote_diff:,} votes (est. remaining: {votes_remaining:,}, {counted_since:,} counted since last update) (precincts: {precincts_reporting}/{precincts_total}) ({candidate2_name} needs {hurdle:.2%} [{hurdle-last_iteration_info.hurdle:.3%}])'

        # Save info for the next iteration
        last_iteration_info = iteration_info

for (state, timestamped_results) in summarized.items():
    print(f'\n{state}:')
    for (timestamp, candidate_votes) in reversed(timestamped_results.items()):
        delta = (datetime.datetime.utcnow() - timestamp)
        delta_str = humanize.naturaltime(delta)
        formatted_timestamp = timestamp.strftime('%Y-%m-%d %H:%M')
        print(f'  {formatted_timestamp} ({delta_str}) {candidate_votes}')
