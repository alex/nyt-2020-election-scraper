<!doctype html>
<html lang="en">

<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:title" content="ANN Election Data" />
    <meta name="twitter:description" content="Battleground state changes, updated every five minutes using NYT data." />
    <meta name="twitter:url" content="https://alex.github.io/nyt-2020-election-scraper/battleground-state-changes.html" />
    <meta property="og:title" content="ANN Election Data" />
    <meta property="og:description" content="Battleground state changes, updated every five minutes using NYT data." />
    <meta property="og:image" content="https://avatars3.githubusercontent.com/u/772?s=400&u=7c00c7c8ac3691da556d7686e16ff08b797d4a38&v=4" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=yes">

    <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>üó≥Ô∏è</text></svg>">
    <link rel="alternate" type="application/rss+xml" title="ANN Election Data RSS Feed" href="/nyt-2020-election-scraper/battleground-state-changes.xml" />
    
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css"
        integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">
    <style>
    .table-responsive.table-responsive {
      overflow-x: unset;
    }
    
    .table td, .table th {
        padding: .25rem .5rem;
    }

    thead td {
      background-color: #e9ecef;
      line-height: 1.2rem;
    }

    thead .text-left {
        font-weight: normal;
    }

    thead span.statename {
        font-weight: bold;
        /* If changing these, update "thead tr:nth-child(2) th" too */
        font-size: 1.2rem;
        line-height: 1.2rem;
    }

    thead tr:nth-child(1) td {
        position: sticky;
        top: -1px;
        border-bottom: none;
    }

    thead tr:nth-child(2) th {
        position: sticky;
        /* Padding, first line, second line, padding */
        top: calc(.25rem + 1.2rem + 1.2rem + .25rem);
        border-right: none;
        border-left: none;
        border-top: none;
    }

    .has-tip {
        text-decoration: underline;
        text-decoration-style: dotted;
    }

    .flag-bg {
        background-position: fixed;
        background-repeat: no-repeat;
        background-size: auto 100%;
        background-position: 100%;
    }

    .Biden{
        background-color: #84C4EE
    }
    .Trump{
        background-color: #ED98A9;
    }

    @media (prefers-color-scheme: dark) {
        body {
            color: #ffffff;
            background-color: #202020;
        }
        .table {
            color: #dedad6;
            background-color: #202020;
        }
        .table .thead-light th, .table .thead-light td {
            background-color: #495057;
            color: #e9ecef;
        }
        .table .thead-light th, .table td {
            border-color: #211d19;
        }
        .Biden {
            background-color: #05456F;
        }
        .Trump {
            background-color: #6E192A;
        }
    }
    </style>
    <title>Election 2020 Results</title>

    <script src="https://unpkg.com/dayjs@1.9.5/dayjs.min.js"
            integrity="sha384-I8UysxWXKTbAFvVRecMrWcGRGR4RDZ7mOuoWjMA84MWM0OQ+4IriYjgc2+hHzEo8"
            crossorigin="anonymous"></script>
    <script src="https://unpkg.com/dayjs@1.9.5/plugin/utc.js"
            integrity="sha384-PcsSBVvWDlTmn0uPlrBbd/cUxDra/qov78qWgB2Qh6TwCiXAyuJQerEmS4PoVaRQ"
            crossorigin="anonymous"></script>
    <script src="https://unpkg.com/dayjs@1.9.5/plugin/relativeTime.js"
            integrity="sha384-Dy9nN0yYkuj/yhJJITfTyN7H84joqwvGkDsyXr+JavETPnhOzTe48kfPQEI1ee0Q"
            crossorigin="anonymous"></script>
    <script src="https://unpkg.com/dayjs@1.9.5/plugin/advancedFormat.js"
            integrity="sha384-y6wn9TDoovj2ZC4/cCf+qm4Kxiha/hhqfOb/L5RThIKLYDrhcLLfTSPyyHLMM9kF"
            crossorigin="anonymous"></script>
    <script src="https://unpkg.com/dayjs@1.9.5/plugin/timezone.js"
            integrity="sha384-ABtdoJNGKT1efF9sGomlK3/sBQIhkJb0H32JGT5/7DP8H5kKBMS5mwMLu0SExhQH"
            crossorigin="anonymous"></script>

    <script type="text/javascript">
        dayjs.extend(dayjs_plugin_relativeTime)
        dayjs.extend(dayjs_plugin_utc)
        dayjs.extend(dayjs_plugin_advancedFormat)
        dayjs.extend(dayjs_plugin_timezone)

        const prettyTime = timestamp => dayjs.utc(timestamp.replace(" UTC", ""), 'YYYY-MM-DD HH:MM:SS').fromNow()
        const localTime = timestamp => dayjs.utc(timestamp.replace(" UTC", ""), 'YYYY-MM-DD HH:MM:SS').local().format('DD MMM YYYY h:mm:ss A z');

        const handleNode = node => {
            if (node.classList && node.classList.contains('timestamp')) {
                let timestamp;
                if (node.hasAttribute('data-timestamp')) {
                    timestamp = node.getAttribute('data-timestamp');
                } else {
                    timestamp = node.innerHTML;
                    node.setAttribute('data-timestamp', timestamp);
                }
                node.innerHTML = `<abbr class='pretty-timestamp' title='${localTime(timestamp)}'>${prettyTime(timestamp)}</abbr>`;
            }
        };

        new MutationObserver(mutations => {
            for (let i = 0, len = mutations.length; i < len; i++) {
                let added = mutations[i].addedNodes;
                for (let j = 0, node; (node = added[j]); j++) {
                    if (node.tagName === 'td' || node.tagName === 'span') {
                        handleNode(node);
                    } else if (node.firstElementChild) {
                        for (const child of node.querySelectorAll('td,span')) {
                            handleNode(child);
                        }
                    }
                }
            }
        }).observe(document, {
            childList: true,
            subtree: true,
        });

        setInterval(() => {
            $(".pretty-timestamp").map((_, tselem) => {
                tselem.innerText = prettyTime(tselem.parentElement.getAttribute("data-timestamp"));
            });
        }, 60 * 1000);
    </script>
</head>

<body>
<div id="body" class="container-fluid">
    <div class="row">
        <div class="col-sm">
            <p style="font-size: 1.4rem;">
                All data below is sourced from an unofficial API powering the New York Times‚Äô election site.
                <strong>The estimated votes remaining values might be off</strong>.
                Consult state websites and officials for the most accurate and up-to-date figures.
                This website is <a href="https://github.com/alex/nyt-2020-election-scraper">open source</a> and was written by <a href="https://github.com/alex/nyt-2020-election-scraper/graphs/contributors">these people</a>.
            </p>
        </div>
    </div>
    <div class="row">
        <div class="col-sm">
            <p class="float-left" id="timestamps">Last scrape: <span class="timestamp">{% SCRAPE_TIME %}</span> | Last batch: <span class="timestamp">{% BATCH_TIME %}</span></p>
            <div id="template-hash" style="display: none;">{% TEMPLATE_HASH %}</div>
            <div id="page-metadata" style="display: none;">{% PAGE_METADATA %}</div>
        </div>
        <div class="col-sm">
            <p class="float-right">
            <button type='button' id='live_update_button' class='btn btn-secondary'>Enable Live Updates</button>
            <button type='button' id='shrink_button' class='btn btn-secondary'>Shrink Tables</button>
            </p>
        </div>
    </div>
    <div class="row">
        <div class="col-sm">
            {% TABLES %}
        </div>
    </div>
</div>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
        integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx"
        crossorigin="anonymous"></script>
    <script type="text/javascript">
        const features = {};
        const isFeatureEnabled = key => localStorage.getItem(key) === 'true';

        const feature = (key, buttonId, onEnable, onDisable) => {
            const button = $(buttonId);
            button.on('click', function() {
                if (isFeatureEnabled(key)) {
                    localStorage.removeItem(key);
                    onDisable(button);
                } else {
                    localStorage.setItem(key, 'true');
                    onEnable(button);
                }
            });

            if (isFeatureEnabled(key)) {
                onEnable(button);
            }

            features[key] = {
                buttonId,
                onEnable,
                onDisable
            };
        };

        const refreshFeature = key => {
            if (isFeatureEnabled(key)) {
                features[key].onEnable($(features[key].buttonId));
            } else {
                features[key].onDisable($(features[key].buttonId));
            }
        };
    </script>

    <script type="text/javascript">
        const loadTooltips = () => {
            $(function () {
                $('[data-toggle="tooltip"]').tooltip({ boundary: 'window' })
            })
        };
        loadTooltips();

        const shrinkTablesFeature = 'shrunk';
        feature(shrinkTablesFeature, '#shrink_button', button => {
            button.html('Expand Tables');
            $('.table').each(function(){
                var countOfNonHiddenBlock = 0;
                var lastCount = -1;
                $(this).find('tbody tr').each(function() {
                    var value = parseInt(($(this).find('td:nth(4)').text()));
                    if (countOfNonHiddenBlock >= 3 || (value === 0 && lastCount === 0)) {
                        $(this).hide();
                    } else {
                        countOfNonHiddenBlock++;
                    }
                    lastCount = value;
                });
            });
        }, button => {
            button.html('Shrink Tables');
            $('.table').each(function() { $(this).find('tbody tr').show(); });
        });
    </script>

    <script type="text/javascript">
        // grab the latest html and return it as a Document
        const fetchLatestContent = async () => {
            const contentResponse = await fetch(location.toString(), {
                cache: 'no-cache',
            });
            const contentBody = await contentResponse.text();
            const contentDom = new DOMParser().parseFromString(contentBody, 'text/html');

            let contentMetadata;
            if (contentDom.getElementById("page-metadata")) {
                contentMetadata = JSON.parse(contentDom.getElementById("page-metadata").innerText);
            } else {
                contentMetadata = {
                    template_hash: contentDom.getElementById("template-hash").innerText,
                };
            }
            return {
                metadata: contentMetadata,
                dom: contentDom,
            }
        };

        // check if the current host is a development host
        const isDeveloperEnvironment = () => {
            return location.protocol === 'file:' || location.hostname === 'localhost' || location.hostname === '127.0.0.1';
        };

        // if the new page has notifications, show them
        // if the new page is an updated template, hard refresh (which should get us the new page since we just loaded it)
        // otherwise, replace the div id=body element
        const updateCheck = async (currentMetadata, forceNotify) => {
            const latestContent = await fetchLatestContent();
            const latestMetadata = latestContent.metadata;
            const latestDom = latestContent.dom;
            console.log("latest content", latestContent);

            let shouldNotify = latestMetadata.states_updated.length && (
                forceNotify ||
                (currentMetadata && currentMetadata.results_hash !== latestMetadata.results_hash)
            );

            if (currentMetadata && currentMetadata.template_hash !== latestMetadata.template_hash) {
                console.log("new template, forcing reload");
                if (shouldNotify) {
                    location.hash = "notify";
                }
                location.reload(true);
                return;
            }

            if (shouldNotify && Notification.permission === "granted") {
                const notification = new Notification(`New ballots were counted in: ${latestMetadata.states_updated.join(", ")}!`);
                notification.onclick = function (event) {
                    // focus page
                    window.parent.focus();
                    // just in case, older browsers
                    window.focus();
                    // dismiss notification
                    event.target.close();
                };
            }

            $('[data-toggle="tooltip"]').tooltip('hide')

            const elementsToUpdate = [
                ...Array.from(document.getElementsByTagName("table")),
                document.getElementById("timestamps"),
            ];

            elementsToUpdate.forEach(oldElement => {
                let newElement = latestContent.dom.getElementById(oldElement.id);
                oldElement.parentNode.replaceChild(newElement, oldElement);
            });

            loadTooltips();
            refreshFeature(shrinkTablesFeature);

            return latestContent.metadata;
        };

        // do a test update
        updateCheck(undefined, location.hash === '#notify');
        location.hash = "";

        const startLiveUpdates = async () => {
            let currentMetadata = (await fetchLatestContent()).metadata;
            console.log("current content", currentMetadata);

            const nextCheck = () => {
                return isDeveloperEnvironment() ? 5 * 1000 : 60 * 1000;
            };

            const runner = async () => {
                if (!isFeatureEnabled(liveUpdatesFeature)) return;

                try {
                    currentMetadata = await updateCheck(currentMetadata, false);
                } catch (e) {
                    console.log("failed to check for updates", e);
                }
                setTimeout(runner, nextCheck());
            };

            setTimeout(runner, nextCheck());
        };

        const liveUpdatesFeature = 'live-updates';
        feature(liveUpdatesFeature, '#live_update_button', button => {
            button.html('Disable Live Updates');

            if ('Notification' in window && Notification.permission !== 'granted') {
                Notification.requestPermission();
            }

            startLiveUpdates();
        }, button => {
            button.html('Enable Live Updates');
        });
    </script>
</body>
