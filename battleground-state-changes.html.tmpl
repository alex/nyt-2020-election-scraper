<!doctype html>
<html lang="en">

<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=yes">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css"
        integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">
    <style>
    body {
        margin: 1rem;
    }
    
    .table td, .table th {
        padding: .25rem .5rem;
    }

    .table th.text-center {
        position: sticky;
        top: -1px;
    }

     .table th.has-tip {
        position: sticky;
        top: calc(.25rem + 1.5rem + 2px);
    }

    .has-tip:after{
        content: "ℹ";
        margin-left: 5px;
    }

    .Biden{
        background-color: #84C4EE
    }
    .Trump{
        background-color: #ED98A9;
    }

    @media (prefers-color-scheme: dark) {
        body {
            color: #ffffff;
            background-color: #202020;
        }
        .table {
            color: #dedad6;
            background-color: #202020;
        }
        .table .thead-light th {
            background-color: #495057;
            color: #e9ecef;
        }
        .table .thead-light th, .table td {
            border-color: #211d19;
        }
        .Biden {
            background-color: #05456F;
        }
        .Trump {
            background-color: #6E192A;
        }
    }
    </style>
    <title>Election 2020 | Last scrape: {% SCRAPE %}</title>
</head>

<body>
    <p style="font-size: 1.4rem;">
        All data below is sourced from an unofficial API powering the New York Times’ election site.
        <strong>The estimated votes remaining values might be off</strong>.
        Consult state websites and officials for the most accurate and up-to-date figures.
        This website is <a href="https://github.com/alex/nyt-2020-election-scraper">open source</a> and was written by <a href="https://github.com/alex/nyt-2020-election-scraper/graphs/contributors">these people</a>.
    </p>

    <p class="text-right">
      <button type='button' id='notification_button' class='btn btn-secondary'>Enable Notifications</button>
      <button type='button' id='live_update_button' class='btn btn-secondary'>Enable Live Updates</button>
      <button type='button' id='shrink_button' class='btn btn-secondary'>Shrink Tables</button>
    </p>


    {% TABLES %}

    <script src="https://unpkg.com/dayjs@1.8.21/dayjs.min.js"
        integrity="sha384-cuApTuVdn64P5ZOzyf+qTgNxGwhvW/ZmdAbNMcl7Q3TkMKJ7/bERQ1cFDmZy7QvZ"
        crossorigin="anonymous"></script>
    <script src="https://unpkg.com/dayjs@1.8.21/plugin/utc.js"
        integrity="sha384-r1JLNIu5SkAfQejSOJPjndnEZkxex5ChJOTaiQeN91L012sA1pyw0A/543Xq97wb"
        crossorigin="anonymous"></script>
    <script src="https://unpkg.com/dayjs@1.8.21/plugin/relativeTime.js"
        integrity="sha384-ojZWhTxW4vjtUz9IjuxEgcPAQQkFj7jlcOnGFp8IyTUTQpFisDT5u8zFh2d0GrSM"
        crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
        integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx"
        crossorigin="anonymous"></script>
    <script type="text/javascript">
        const features = {};
        const isFeatureEnabled = key => localStorage.getItem(key) === 'true';

        const feature = (key, buttonId, onEnable, onDisable) => {
            const button = $(buttonId);
            button.on('click', function() {
                if (isFeatureEnabled(key)) {
                    localStorage.removeItem(key);
                    onDisable(button);
                } else {
                    localStorage.setItem(key, 'true');
                    onEnable(button);
                }
            });

            if (isFeatureEnabled(key)) {
                onEnable(button);
            }

            features[key] = {
                buttonId,
                onEnable,
                onDisable
            };
        };

        const refreshFeature = key => {
            if (isFeatureEnabled(key)) {
                features[key].onEnable($(features[key].buttonId));
            } else {
                features[key].onDisable($(features[key].buttonId));
            }
        };
    </script>

    <script type="text/javascript">
        $(function () {
            $('[data-toggle="tooltip"]').tooltip()
        })

        dayjs.extend(dayjs_plugin_relativeTime)
        dayjs.extend(dayjs_plugin_utc)

        const prettyTimestamps = () => {
            $(".timestamp").map(function (idx, tselem) {
                tselem.innerHTML = "<abbr title='" + tselem.innerHTML + "'>" + dayjs.utc(tselem.innerHTML.replace(" UTC", ""), 'YYYY-MM-DD HH:MM:SS').fromNow() + "</abbr>"
            })
        };
        prettyTimestamps();

        const shrinkTablesFeature = 'shrunk';
        feature(shrinkTablesFeature, '#shrink_button', button => {
            button.html('Expand Tables');
            $('.table').each(function() { $(this).find('tbody tr:gt(2)').hide(); });
        }, button => {
            button.html('Shrink Tables');
            $('.table').each(function() { $(this).find('tbody tr').show(); });
        });
    </script>

    <script type="text/javascript">
        const liveUpdatesFeature = 'live-updates';
        feature(liveUpdatesFeature, '#live_update_button', button => {
            button.html('Disable Live Updates');
        }, button => {
            button.html('Enable Live Updates');
        });

        const notificationFeature = 'notifications';
        feature(notificationFeature, '#notification_button', button => {
            button.html('Disable Notifications');

            if (!('Notification' in window)) {
                return;
            }

            if (Notification.permission !== "denied") {
                Notification.requestPermission();
            }
        }, button => {
            button.html('Enable Notifications');
        });

        (async function() {
            const fetchLatestCommit = async () => {
                const response = await fetch("https://api.github.com/repos/alex/nyt-2020-election-scraper/commits?per_page=10", {
                    cache: 'no-cache',
                    headers: {
                        accept: 'application/vnd.github.v3+json',
                    },
                });
                const body = await response.json();
                for (var i = 0; i < body.length; i++) {
                    if (body[i]['commit']['author']['email'] === 'actions@users.noreply.github.com' &&
                        body[i]['commit']['message'] === 'Regenerate battleground-state-changes.txt/html') {
                        return body[i];
                    }
                }
                return body[0]; // ???
            };

            const fetchLatestContent = async (sha) => {
                const response = await fetch(`https://raw.githubusercontent.com/alex/nyt-2020-election-scraper/${sha}/battleground-state-changes.html`, {
                    cache: 'no-cache',
                });
                const body = await response.text();
                return new DOMParser().parseFromString(body, 'text/html');
            };

            let currentCommit = await fetchLatestCommit();
            console.log("current commit", currentCommit);

            // live updates
            setInterval(async function() {
                if (!isFeatureEnabled(liveUpdatesFeature)) return;

                let latestCommit = await fetchLatestCommit();
                console.log("latest commit", latestCommit);

                if (currentCommit['sha'] !== latestCommit['sha']) {
                    let newContent = await fetchLatestContent(latestCommit['sha']);

                    Array.from(document.getElementsByTagName("table")).forEach(table => {
                        let newTable = newContent.getElementById(table.id);
                        table.parentNode.replaceChild(newTable, table);
                    });
                    prettyTimestamps();
                    refreshFeature(shrinkTablesFeature);

                    currentCommit = latestCommit;
                    if (isFeatureEnabled(notificationFeature)) {
                        new Notification("New ballots were counted!");
                    }
                }
            }, 5 * 60 * 1000);
        })();
    </script>
</body>
